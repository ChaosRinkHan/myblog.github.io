<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo 博文简单美化]]></title>
    <url>%2Fmyblog.github.io%2FHexo-%E5%8D%9A%E6%96%87%E7%AE%80%E5%8D%95%E7%BE%8E%E5%8C%96%2F</url>
    <content type="text"><![CDATA[文字背景色块添加打开themes/next/source/css/_custom 下的 custom.styl 文件,添加自定属性样式 1234567891011121314// 颜色块-黄span#inline-yellow &#123;display:inline;padding:.2em .6em .3em;font-size:80%;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:0;background-color: #f0ad4e;&#125; 想添加自定义颜色，修改最后的backgroud-color即可。 使用在md正文中如下格式： &lt;span id=&quot;inline-blue&quot;&gt; Text here &lt;/span&gt; 就可使用了。 效果： Text Text Text Text 使用FA图标在md正文中使用 &lt;i class=&quot;fa fa-subway&quot;&gt;&lt;/i&gt; 来调用FA图标。第二个fa后单词改为需要的图标名称即可。 改变大小：经过测试，有用的包括 1234&lt;i class="fa fa-camera-retro fa-lg"&gt;&lt;/i&gt;&lt;i class="fa fa-camera-retro fa-2x"&gt;&lt;/i&gt;&lt;i class="fa fa-camera-retro fa-3x"&gt;&lt;/i&gt;&lt;i class="fa fa-camera-retro fa-5x"&gt;&lt;/i&gt; 效果]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Trip to Malaysia]]></title>
    <url>%2Fmyblog.github.io%2FTrip-to-Mlaysia%2F</url>
    <content type="text"><![CDATA[Plan 槟城预计到达时间：11点 市区：步行，参考行程助手景点地图 升旗山/极乐寺 BUShttp://www.rapidpg.com.my/journey-planner/route-maps 吉隆坡吉隆坡·攻略·交通 蓝色点：吉隆坡购物中心红色点：吉隆坡市区十大景点半透明圆形：500米的半径辐射 吉隆坡的轨道交通有6条线，分别是轻轨(LRT，包含安邦线Ampang Line &amp; Sri Petaling Line、格兰那再也线The Kelana Jaya Line，又称Putra Line）、单轨(MonoRail绿线)和电动火车(即KTM Komuter，红线&amp;蓝线)，轻轨与单轨均由MYrapid公司运营。市内景点较为密集且靠近站点附近，大部分景点可乘坐轨道交通步行到达。前往茨厂街，乘坐 Kelana Jaya Line (即轻轨LRT的格兰那再也线，往KLCC方向)，在Pasar Seni站下车后步行5分钟左右，其内的景点亦可步行到达。前往双子塔同样乘坐 Kelana Jaya Line 线，在KLCC站下车即可，前往吉隆坡塔乘坐单轨电车 MonoRail到Raja Chulan站下车步行。 茨厂街(2小时) 步行10分钟 马里安曼印度庙(1小时) 步行2分钟 关帝庙(20分钟) 地铁20分钟 国家石油公司双子塔(2小时) 地铁20分钟 阿罗街(1小时) 国家清真寺(1.5小时) 步行5分钟 城市长廊(30分钟) 步行3分钟 独立广场(1小时) 步行5分钟 苏丹阿都沙末大厦(1小时) 步行2分钟 佳密清真寺(1小时)]]></content>
      <tags>
        <tag>Trip</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[My first post]]></title>
    <url>%2Fmyblog.github.io%2FMy-first-post%2F</url>
    <content type="text"><![CDATA[Hello World! 我迁移到这里啦之前CSDN的文章、微信公众号的文章会慢慢迁移过来。 CSDN多是技术方面的文章，微信上面个人体验和测评和扯淡比较多。有时候还会发知乎专栏等等，但是没有一个统一的平台来做一些管理。以后主要一些随笔和文章就发表在这里了。 Markdown语法的支持变得愈发重要，微信公众号不支持Markdown语法，迁移过来会稍微费事一点。以后一般都用MD写作，所以统一在这里发布了。 同时最近有了一个小相机也慢慢去了不少地方了。网上图片社区也不是很喜欢，等找到好的图床，拍的照片会慢慢传上来。 个人博客和域名这个博客是基于Hexo和Github搭建的，大概半天就配置好了，其实挺方便的。有空会慢慢加上新的功能，比如评论系统和RSS。 由于Github时常抽风，在考虑购买一个非.cn的域名。各位有要转让的域名可以联系我。预算有限。 这里就可以为所欲为地发文章了。 嗯。 没有CSDN的原创核审，没有微信的和谐。 联系我其实主页是有About的我还没有写。 chaorinkhan@gmail.com executer@qq.com]]></content>
      <tags>
        <tag>Writings</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cx_Freeze发布Python程序的一些经验]]></title>
    <url>%2Fmyblog.github.io%2Fcx_Freeze%E5%8F%91%E5%B8%83Python%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[前言最近用Python写了一个化工方面的辅助计算软件，使用PyQt实现界面，同时用了很多库来实现作图和科学计算、求解等功能。使用界面与逻辑分离的方法，画好UI再编码具体功能。这次规模比第一次写的PyQt+SQL的单一界面复杂很多，在打包发布时遇到的问题也是非常多，一方面代码量非常大，另一方面涉及到的库非常多。 pyinstaller和cx_Freeze的对比之前用pyinstaller打包，遇到的问题也就是decimal的问题，属于隐藏的库的没有导入，这次由于库太多，用pyinstaller打包的时候单个程序出来大概60M，而且打开极慢。同时根据报错来看，pyinstaller并非支持所有库，有的库无法打包发布，比如这次程序使用的scipy。于是采用了cx_Freeze来打包。虽然理论上来讲是可以成功打包的，但是由于这个工具的简单性导致了一系列error。 matplotlib，numpy，scipymatplotlib库在导入时会出现报错，这是因为它的作图依赖于tkinter，cx_Freeze打包不会将它直接包括； 123os.environ['TCL_LIBRARY'] = '*\\Python36-32\\tcl\\tcl8.6'os.environ['TK_LIBRARY'] = '*\\Python36-32\\tcl\\tk8.6'# *处为Python目录位置，反斜杠依然两个 numpy.core._methods无法找到的报错：options里面includes： 1'includes': ['numpy.core._methods'] 程序中使用from … import … ，cx_Freeze打包可能出现库导入不完全的情况，即是看报错信息，没有什么module，在程序中import all或者在setup中include： 1'packages':['scipy', 'numpy', 'matplotlib', 'tkinter'] 目前Python 3.6里面包括的tk导入会出现dll错误：ImportError: DLL load failed，这个和cx_Freeze自身有关，需要include： 12'include_files': ['*\\Python36-32\\DLLs\\tk86t.dll'],# *处为Python目录位置，反斜杠依然两个 使用绝对位置的资源文件： 1include_files=[&apos;1.png&apos;, &apos;2.png&apos;, &apos;bg.png&apos;, &apos;bg1.png&apos;] buildbuild文件夹包含了所有的要用到的编译好的库文件，文件结构决定了程序运行非常快，基本能秒开了。 setup.py仅供参考。比较麻烦的几个库都用了，没用这些应该会简单很多。 1234567891011121314151617181920212223242526272829from cx_Freeze import setup, Executableimport sysimport osos.environ['TCL_LIBRARY'] = 'C:\\Users\\Chaolin Han\\AppData\\Local\\Programs\\Python\\Python36-32\\tcl\\tcl8.6'os.environ['TK_LIBRARY'] = 'C:\\Users\\Chaolin Han\\AppData\\Local\\Programs\\Python\\Python36-32\\tcl\\tk8.6'base = 'WIN32GUI' if sys.platform == "win32" else Noneexecutables = [Executable("Main_new.py", base=base)]packages = []include_files=['1.png', '2.png', 'bg.png', 'bg1.png']options = &#123; 'build_exe': &#123; 'packages':['scipy', 'numpy', 'matplotlib', 'tkinter'], 'include_files': ['C:\\Users\\Chaolin Han\\AppData\\Local\\Programs\\Python\\Python36-32\\DLLs\\tcl86t.dll', 'C:\\Users\\Chaolin Han\\AppData\\Local\\Programs\\Python\\Python36-32\\DLLs\\tk86t.dll'], 'includes': ['numpy.core._methods'] &#125;,&#125;setup( name = "Prog", options = options, version = "1.0", description = 'desc of program', executables = executables)]]></content>
      <tags>
        <tag>Python</tag>
        <tag>PyQt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PyQt5 多窗口连接]]></title>
    <url>%2Fmyblog.github.io%2FPyQt5%20%E5%A4%9A%E7%AA%97%E5%8F%A3%E8%BF%9E%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[前言之前做过pyqt的一个简单界面，在一个窗口（MainWindow）中实现一些操作；之前嫌麻烦没有去做多窗口和它们的切换功能。最近研究了下窗口的调用和切换。pyqt4和5有很多不同，在参考别人案例的时候走了很多弯路，最后在pyqt5下实现了简洁的多窗口切换为大家参考。 思路多窗口的切换和显示连接到按钮的信号上再进行show（）就行，格式上有别于pyqt4。一个逻辑比较清晰的解决方案是，使用一个主程序，在其中实例化各个窗口，然后定义它们的显示逻辑即是按钮的槽函数。格式上稍有不对就会报错，也是让我重新审视了一下python类和继承的语法= =同时窗口的类型也和pyqt4有所不同，pyqt5下QWidgets为主，与4中QDialog显示方式也有所不同。具体方式见代码。 代码主程序——实例化各个窗口1234567891011121314151617181920212223242526272829303132333435from PyQt5 import QtCore, QtGui, QtWidgetsfrom test import Ui_Dialogfrom Login import Ui_MainWindow_Loginclass Ui_Dialog(QtWidgets.QWidget,Ui_Dialog): def __init__(self): super(Ui_Dialog,self).__init__() self.setupUi(self) #定义登出按钮的功能 def logoutEvent(self): self.hide() #隐藏此窗口 self.log = loginWindow() self.log.show() #显示登录窗口 #必须加上selfclass loginWindow(QtWidgets.QMainWindow,Ui_MainWindow_Login): def __init__(self): super(loginWindow,self).__init__() self.setupUi(self) #定义登录按钮的功能 def loginEvent(self): self.hide() self.dia = Ui_Dialog() self.dia.show() #self.dia.exec_() #pyqt5下show()方法有所改变，不再使用exec_()方法。#运行窗口Loginif __name__=="__main__": import sys app=QtWidgets.QApplication(sys.argv) login_show=loginWindow() login_show.show() sys.exit(app.exec_()) 多窗口需要用到的多个窗口可以用Designer直接生成，主窗口实例化。在其中定义好信号连接即可 12345678910111213141516from PyQt5 import QtCore, QtGui, QtWidgetsclass Ui_MainWindow_Login(object): def setupUi(self, MainWindow_Login): #略 def retranslateUi(self, MainWindow_Login): #略 if __name__=="__main__": import sys app=QtWidgets.QApplication(sys.argv) widget = QtWidgets.QMainWindow() login = Ui_MainWindow_Login() login.setupUi(widget) widget.show() sys.exit(app.exec_()) 效果点击登陆：退出登录则返回到第一个窗口。 切换理解好这个实例后，添加更多窗口都是线性复杂度的操作，在Designer中设计好窗口，直接转码后就可在主程序中实例化该窗口并设计它们的显示逻辑。]]></content>
      <tags>
        <tag>Python</tag>
        <tag>PyQt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PyQt5+python+数据库可视化操作界面]]></title>
    <url>%2Fmyblog.github.io%2F%E5%9F%BA%E4%BA%8EPyQt5%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%AF%E8%A7%86%E5%8C%96%E6%93%8D%E4%BD%9C%E7%95%8C%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[前言这是我python入门写的第一个项目，从前天晚上开始构思到今天做了第一个Release。这两天时间做了读了Qt库和pymssql的不少文档，边学边做写了一个可视化窗口实现数据库的操作。对PyQt的理解也就限于槽和信号沟通环节，pymssql主要是连接部分，并未过多涉及。内容为医院挂号系统，基本实现和练习了增删查改操作。介绍环境和配置上的操作以及搭建经验。 PyQt5环境参考PyQt5+python3+pycharm开发环境配置集成了PyUIC和QtDeisgner。其中Designer跨语言，可以画一些简单的窗口和控件，输出.ui格式的文件，利用PyUIC转码为.py进行编辑。PyQt库非常庞大，但我实际操作主要聚焦于控件的方法和定义。Qt的参考文档为C++环境，结合Pycharm自动补全基本可以避开转换的问题。可以看到MainWindow代码很长，但大部分都是ui文件转码自动生成的（retranslateUi、setupUi），实际需要编写的就是逻辑和实现部分。 数据库连接由于要求和环境的限制，我使用了SQL server 2012。MySQL,SQLite等连接更为简洁方便。选用的库为pymssql，参考官方文档pymssql连接方面，需要首先登陆SQL Management Studio以管理员身份，然后设置中添加用于该项目连接的用户并给它授权。授权选项中我是全部勾选。然后在其中建好设计好的两个表Doctor（用于检索医生）和Reg（用于前端操作）注意设计时，将varchar()数据类型更改为nvarcahar,便于中文输入输出，同时连接时采用utf8字集： 12345server = "DESKTOP-9RUT87E"user = "Hospital"password = "123456"#print('Connecting to MSSQL...')conn = pymssql.connect(server, user, password, database="Hospital", charset='utf8') 之后阅读学习python中获取光标进行简单的数据库操作，即可实现在程序中实现数据库操作了，可以参考pymaasql的example。 Python编辑本项目的意义在于简单的图像化操作代替数据库语言来实现数据的增删查改。考虑到绘制的问题，采用的简单的单一界面交互。对于多界面交互则需要绘制多个ui文件并在主程序中调用。 QtDesigner绘界面 非常方便地从左侧选取想要加入的元素，右侧属性栏也可以很好地自定义。对应生成了retranslateUi、setupUi中的代码，参考意义不大故移入附录。 转码为.py文件进行编辑 若搭建好开发环境，可直接从Pycharm中选择外部工具对ui文件转码，或是直接文件夹下shift+右键打开cmd调用pyuic转码。 由于 QtDesigner提供的信号和槽连接非常简单而且多数需要实现的功能为SQL连接和操作，故需要自定信号和槽函数来实现这些按钮，所以转码后在IDE中进行编写。 熟悉了PyQT空间的语法和事件命名方式后，就可以轻松写出自定槽函数来接受按钮信号，同时获取和改变它们的各种状态。有空会写PyQt常见类的常见操作供交流。接下来就是由设计的界面、数据库结构设计交互逻辑并实现。 交互设计窗口的交互分了7个按钮，交互逻辑如下 查询在岗医生根据科室和是否专家查询可用的医生 挂号挂号需要提供个人信息，同时根据需要挂的科室，可执行上一步操作，选择合适的医生，填入医生号码进行挂号 截图：此时点击挂号即可完成挂号其中1、2两步顺序随意。 查、删、改根据提供的信息构建操作来实现，要注意到这些信息并不是全部需要，例如可以查询急症科的所有病人，也可以查询具体的某一个人 例：查询急症科的男病人 记录日志简单的文件写入操作 保存的log： 实现 按钮槽函数的编写DB_开头的函数为自定槽函数，用于响应按钮点击的事件。同时需要一些自定辅助函数和全局变量用于系统状态的维护。编写思路见代码注释。 引用并执行编写HospitalRegSys.py作为主程序来调用编写好的ui转码而来的文件，实现主程序和UI界面代码的分离，也方便添加多个界面。 12345678910111213141516# HospitalRegSys0045.pyfrom PyQt5 import QtCore, QtGui, QtWidgetsfrom MainWindow import Ui_MainWindowimport decimalclass mwindow(QtWidgets.QMainWindow,Ui_MainWindow): def __init__(self): super(mwindow,self).__init__() self.setupUi(self)if __name__=="__main__": import sys app=QtWidgets.QApplication(sys.argv) mshow=mwindow() mshow.show() sys.exit(app.exec_()) 主窗口代码 12# 不再提供# No avilable now pyinstaller生成可执行文件生成exe的时候遇到了很多困难，和python3.6环境以及pymssql、pyinstaller设置的参数有关。经过多次测试和参考官方文档，在cmd中执行程序，根据报错“没有找到模块XXX”，直接在主程序中引入该模块即可，即是 12import decimal# import的具体模块和报错缺少的模块有关 这个模块和_mssql有关，可见库和环境的不兼容性。 附录数据库结构 retranslateUi、setupUi代码只需编辑setupUi最后连接部分的信号，以实现按钮的功能。12# 不再提供# No avilable now RefPyQt5 Reference Guidepymssql]]></content>
      <tags>
        <tag>Python</tag>
        <tag>PyQt</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写在年末——聚合类应用趋势]]></title>
    <url>%2Fmyblog.github.io%2F%E5%86%99%E5%9C%A8%E5%B9%B4%E6%9C%AB%E2%80%94%E2%80%94%E8%81%9A%E5%90%88%E7%B1%BB%E5%BA%94%E7%94%A8%E8%B6%8B%E5%8A%BF%2F</url>
    <content type="text"><![CDATA[纵观现在的IT，信息爆炸、信息过剩都是不可避免的话题。我们处在一个“信息爆炸”的时代，这句话很多年前就提起过，但现在爆炸完全没有坍缩的痕迹，反而信息过剩更加严重。 多年前的生活很简单，能每天读读报纸就算很“关心”身边的信息了；很多的事情，很多的内容，少有人去发觉，更少有去传播。而借互联网之力，信息服务日益强大，身边各种各样的事情会快速传播，也有越来越多的精品优质内容被人们创作出来。 信息过剩的时候，你读着来自各个应用的信息，追着各种各样的新闻，讨论着各种各样的轶事，却少有自己的存在感；越是感觉自己关注世界，却越是孤独。 聚合类应用旨在选出符合你的兴趣，或是最具代表性，最有价值的文章呈现给用户；最近借着深度学习和AI的东风迅速发展。相信很多人会装很多个app却很少打开，觉得留着占空间，删了又不舍得；或是每天睡觉前刷一遍行业动态or湾区新闻之类的，挨着打开各个app。就我而言，常年关注科技类新闻；我经常看的媒体app包括但不限于：AppSo，ZEALER, Engadget, The Verge, IT之家，爱范儿，果壳，知乎（日报），数字尾巴，少数派；其他的日常新闻类app也有不少；手机就算塞下了这些所以app，它们的效率也很低：能真正读到特定app的有意义的内容在少数情况。 讲了这么多，下面是我个人观点。大胆预测app的一个趋势：聚合类型发展。现在的微信做了小程序，支付宝做了商家app接入，都是很有前瞻性的做法；我在6，7年前智能手机刚兴起时就看中了一个别具一格的新闻类型app：ZAKER。我从它的测试版用户到现在看着它发展成熟，也觉得聚合类app的趋势正在整个信息服务领域是必然趋势；现在越来越多的新闻app开始采用聚合形式，也大胆地开始运用机器学习、AI等先进技术，它们提供的内容针对性强，在信息规模大、碎片化的背景下对我们而言效率极高。 RSS无疑是一个先例，后来RSS倒下了。聚合类app核心在于抓取、爬虫等获得各媒体主要咨询，经过人工编辑，人为调整影响因子或是深度学习用户的阅读习惯、阅读兴趣之后将内容按照一定的顺序呈现出来。技术不难，难的是内容的抓取和筛选的界限。 接下来是我个人深度试用过的聚合类app推荐。它们各有各的特色。 轻芒阅读（原豌豆荚一览），以及轻芒杂志这个应用可以直接阅读很多app的内容，无须因为想获取资讯而去安装它们；也可以按照瀑布流的形式呈现各个app在时间线上的推送资讯。聚合类应用的老大哥吧。 ZAKER聚合类新闻app，可以像RSS一样订阅许多网站和app的内容，是我的主力新闻应用。但是（由于一些不可描述）它又先前的爬虫获取变成的编辑审阅，很多国外资源因此gg，可惜了这个平台。新闻首推之选。 即刻重点在于推送。 期待每一次推送 信息过载的今天，获取有效资讯正变得越来越累。不妨换一种轻盈、高效、省心的方式，与你感兴趣的信息相遇。 在「即刻」，轻松发现、关注你感兴趣的主题，第一时间收到量身定制的更新提醒。「即刻」开始，只看你想看。 NewsfoldFeedly类RSS抓取应用，符合MD，美。 微博，微信之类的推送，都有聚合的效果，但恐怕阅读效率不及专门的聚合app。 以上。同时发布于我个人运维的公众号和我的知乎专栏，转载请联系。]]></content>
      <tags>
        <tag>Writings</tag>
      </tags>
  </entry>
</search>
